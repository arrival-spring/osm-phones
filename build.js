const fs = require('fs');
const path = require('path');
const fetch = require('node-fetch');
const { parsePhoneNumber } = require('libphonenumber-js');

const PUBLIC_DIR = path.join(__dirname, 'public');
const OVERPASS_API_URL = 'https://overpass-api.de/api/interpreter';

// Overpass QL query for phone numbers in the UK
const overpassQuery = `
[out:json][timeout:360];
area["ISO3166-1"="GB"][admin_level=2]->.uk;
(
  node(area.uk)["phone"~".*"];
  way(area.uk)["phone"~".*"];
  relation(area.uk)["phone"~".*"];
  node(area.uk)["contact:phone"~".*"];
  way(area.uk)["contact:phone"~".*"];
  relation(area.uk)["contact:phone"~".*"];
);
out body;
>;
out skel qt;
`;

async function fetchOsmData() {
  console.log('Fetching data from Overpass API...');
  try {
    const response = await fetch(OVERPASS_API_URL, {
      method: 'POST',
      body: `data=${encodeURIComponent(overpassQuery)}`,
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    });
    const data = await response.json();
    console.log(`Fetched ${data.elements.length} elements.`);
    return data.elements;
  } catch (error) {
    console.error('Error fetching OSM data:', error);
    return [];
  }
}

function validateNumbers(elements) {
  const invalidNumbers = [];
  console.log('Validating phone numbers...');

  elements.forEach(element => {
    const tags = element.tags;
    const phoneTags = ['phone', 'contact:phone'];

    for (const tag of phoneTags) {
      if (tags[tag]) {
        const numbers = tags[tag].split(';').map(s => s.trim());
        numbers.forEach(numberStr => {
          try {
            // Using `parsePhoneNumber` with a default country of 'GB'
            const phoneNumber = parsePhoneNumber(numberStr, 'GB');
            if (phoneNumber && !phoneNumber.isValid()) {
              invalidNumbers.push({
                type: element.type,
                id: element.id,
                number: numberStr,
                osmUrl: `https://www.openstreetmap.org/${element.type}/${element.id}`
              });
            }
          } catch (e) {
            // This catches cases where the number string is un-parsable
            invalidNumbers.push({
              type: element.type,
              id: element.id,
              number: numberStr,
              error: e.message,
              osmUrl: `https://www.openstreetmap.org/${element.type}/${element.id}`
            });
          }
        });
      }
    }
  });

  console.log(`Found ${invalidNumbers.length} invalid numbers.`);
  return invalidNumbers;
}

function generateHtmlReport(invalidNumbers) {
  let htmlContent = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Invalid UK Phone Numbers in OpenStreetMap</title>
      <style>
        body { font-family: sans-serif; line-height: 1.6; padding: 20px; }
        h1 { text-align: center; }
        ul { list-style-type: none; padding: 0; }
        li { background: #f4f4f4; margin: 10px 0; padding: 10px; border-radius: 5px; }
        .osm-link { float: right; font-size: 0.8em; }
        .number-info { font-weight: bold; }
        .error { color: red; font-size: 0.9em; }
      </style>
    </head>
    <body>
      <h1>Invalid UK Phone Numbers in OpenStreetMap</h1>
      <p>This report was generated by an automated GitHub Actions workflow on ${new Date().toUTCString()}. It identifies UK phone numbers in OpenStreetMap that are invalid according to Google's libphonenumber library.</p>
      
      <ul>
  `;

  if (invalidNumbers.length === 0) {
    htmlContent += '<li>No invalid phone numbers found! ðŸŽ‰</li>';
  } else {
    invalidNumbers.forEach(item => {
      htmlContent += `
        <li>
          <a href="${item.osmUrl}" target="_blank" class="osm-link">View on OSM</a>
          <span class="number-info">Invalid Number:</span> ${item.number}<br>
          <span class="number-info">OSM ID:</span> ${item.type}/${item.id}<br>
          ${item.error ? `<span class="error">Error:</span> ${item.error}` : ''}
        </li>
      `;
    });
  }

  htmlContent += `
      </ul>
    </body>
    </html>
  `;

  // Create the public directory if it doesn't exist
  if (!fs.existsSync(PUBLIC_DIR)) {
    fs.mkdirSync(PUBLIC_DIR);
  }

  // Write the HTML to the public directory
  fs.writeFileSync(path.join(PUBLIC_DIR, 'index.html'), htmlContent);
  console.log('HTML report generated successfully in the public/ directory.');
}

async function main() {
  const osmElements = await fetchOsmData();
  const invalidNumbers = validateNumbers(osmElements);
  generateHtmlReport(invalidNumbers);
}

main();
